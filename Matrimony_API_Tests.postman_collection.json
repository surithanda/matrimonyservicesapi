{
	"info": {
		"_postman_id": "3988fd5d-4e67-40ba-b727-25efd93071cd",
		"name": "Matrimony API Tests",
		"description": "Collection for testing Matrimony Backend APIs with MySQL. This collection includes tests for authentication (register/login with OTP, forgot password, reset password), user management (get all users), and comprehensive profile management APIs (create/update profiles by email, get profile by email, get all profiles with filtering). The backend uses OTP-based authentication for enhanced security and supports complete matrimony profile management with email-based operations.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20546223"
	},
	"item": [
		{
			"name": "Health Check",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": [
								"{{base_url}}"
							],
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User - Complete Form",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('auth_token', jsonData.token);",
									"    pm.environment.set('user_id', jsonData.user.id);",
									"    pm.test('Registration successful', function () {",
									"        pm.expect(jsonData.message).to.eql('User registered successfully');",
									"        pm.expect(jsonData.user.first_name).to.not.be.undefined;",
									"        pm.expect(jsonData.user.last_name).to.not.be.undefined;",
									"        pm.expect(jsonData.user.gender).to.not.be.undefined;",
									"        pm.expect(jsonData.user.full_name).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Registration failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"divy@gmail.com\",\n    \"password\": \"password123\",\n    \"confirmPassword\": \"password123\",\n    \"first_name\": \"divya\",\n    \"middle_name\": \"nikhil\",\n    \"last_name\": \"punse\",\n    \"birth_date\": \"1995-08-15\",\n    \"gender\": \"Male\",\n    \"complete_address\": \"123 Main Street, Apartment 4B\",\n    \"city\": \"New York\",\n    \"state\": \"NY\",\n    \"country\": \"United States\",\n    \"zip_code\": \"10001\",\n    \"contact_email\": \"john.doe@example.com\",\n    \"primary_phone\": \"9876543210\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register Another User - Female",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"jane.smith@example.com\",\n    \"password\": \"password456\",\n    \"confirmPassword\": \"password456\",\n    \"first_name\": \"Jane\",\n    \"middle_name\": \"Elizabeth\",\n    \"last_name\": \"Smith\",\n    \"birth_date\": \"1992-12-03\",\n    \"gender\": \"Female\",\n    \"complete_address\": \"456 Oak Avenue, Suite 2A\",\n    \"city\": \"Los Angeles\",\n    \"state\": \"CA\",\n    \"country\": \"United States\",\n    \"zip_code\": \"90210\",\n    \"contact_email\": \"jane.smith@example.com\",\n    \"primary_phone\": \"9876543211\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User - Minimal Required Fields",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"minimal.user@example.com\",\n    \"password\": \"password789\",\n    \"confirmPassword\": \"password789\",\n    \"first_name\": \"Minimal\",\n    \"last_name\": \"User\",\n    \"gender\": \"Other\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Send OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('OTP sent successfully', function () {",
									"    const jsonData = pm.response.json();",
									"    pm.expect(pm.response.code).to.eql(200);",
									"    pm.expect(jsonData.message).to.eql('OTP sent successfully to your email');",
									"    pm.expect(jsonData.email).to.not.be.undefined;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nikhil.punse5@gmail.com\",\n    \"password\": \"Admin@123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/send-otp",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"send-otp"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('auth_token', jsonData.token);",
									"    pm.environment.set('user_id', jsonData.user.id);",
									"    pm.test('Login successful', function () {",
									"        pm.expect(jsonData.message).to.eql('Login successful');",
									"        pm.expect(jsonData.token).to.not.be.undefined;",
									"        pm.expect(jsonData.user.full_name).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nikhil.punse5@gmail.com\",\n    \"otp\": \"4795\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login with Password (Legacy)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.environment.set('auth_token', jsonData.token);",
									"    pm.environment.set('user_id', jsonData.user.id);",
									"    pm.test('Login successful', function () {",
									"        pm.expect(jsonData.message).to.eql('Login successful');",
									"        pm.expect(jsonData.token).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Login failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"john.doe@example.com\",\n    \"password\": \"password123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/login-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"login-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Forgot Password - Send OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Password reset OTP sent successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Password reset OTP has been sent to your email address');",
									"        pm.expect(jsonData.email).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Forgot password failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nikhil.punse5@gmail.com\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/forgot-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"forgot-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reset Password with OTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Password reset successful', function () {",
									"        pm.expect(jsonData.message).to.eql('Password reset successfully. You can now login with your new password.');",
									"        pm.expect(jsonData.email).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Password reset failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nikhil.punse5@gmail.com\",\n    \"otp\": \"1234\",\n    \"newPassword\": \"NewPassword@123\",\n    \"confirmNewPassword\": \"NewPassword@123\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/reset-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"reset-password"
							]
						}
					},
					"response": []
				},
				{
					"name": "Change Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Password changed successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Password changed successfully');",
									"        pm.expect(jsonData.user.email).to.not.be.undefined;",
									"        pm.expect(jsonData.user.first_name).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Password change failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 401, 403, 404, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"currentPassword\": \"Admin@123\",\n    \"newPassword\": \"NewPassword@456\",\n    \"confirmNewPassword\": \"NewPassword@456\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/change-password",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"change-password"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Profile Management",
			"item": [
				{
					"name": "Create Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Profile created successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Profile created successfully');",
									"        pm.expect(jsonData.profile_id).to.not.be.undefined;",
									"        pm.expect(jsonData.user_id).to.not.be.undefined;",
									"        pm.expect(jsonData.email).to.not.be.undefined;",
									"    });",
									"} else if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Profile updated successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Profile updated successfully');",
									"        pm.expect(jsonData.user_id).to.not.be.undefined;",
									"        pm.expect(jsonData.email).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Profile operation failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nikhil.punse5@gmail.com\",\n    \"first_name\": \"John\",\n    \"middle_name\": \"Michael\",\n    \"last_name\": \"Doe\",\n    \"prefix\": \"Mr.\",\n    \"suffix\": \"Jr.\",\n    \"gender\": \"Male\",\n    \"birth_date\": \"1995-08-15\",\n    \"primary_phone\": \"9876543210\",\n    \"home_phone\": \"9876543211\",\n    \"emergency_phone\": \"9876543212\",\n    \"nationality\": \"Indian\",\n    \"religion\": \"Hindu\",\n    \"marital_status\": \"Single\",\n    \"caste\": \"General\",\n    \"height_inches\": 70,\n    \"weight\": 75.5,\n    \"weight_unit\": \"Kilograms\",\n    \"complexion\": \"Fair\",\n    \"disability\": \"None\",\n    \"profession\": \"Software Engineer\",\n    \"whatsapp_number\": \"9876543210\",\n    \"linkedin_url\": \"https://linkedin.com/in/johndoe\",\n    \"facebook_url\": \"https://facebook.com/johndoe\",\n    \"instagram_url\": \"https://instagram.com/johndoe\",\n    \"summary\": \"Looking for a life partner who shares similar values and interests. I am a software engineer passionate about technology and family.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Profile updated successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Profile updated successfully');",
									"        pm.expect(jsonData.user_id).to.not.be.undefined;",
									"        pm.expect(jsonData.email).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Profile update failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"nikhil.punse5@gmail.com\",\n    \"first_name\": \"Nikhil\",\n    \"middle_name\": \"Ashok\",\n    \"last_name\": \"Punse\",\n    \"prefix\": \"Mr.\",\n    \"suffix\": \"Jr.\",\n    \"gender\": \"Male\",\n    \"birth_date\": \"1995-08-15\",\n    \"primary_phone\": \"9876543210\",\n    \"home_phone\": \"9876543211\",\n    \"emergency_phone\": \"9876543212\",\n    \"nationality\": \"Indian\",\n    \"religion\": \"Hindu\",\n    \"marital_status\": \"Single\",\n    \"caste\": \"General\",\n    \"height_inches\": 72,\n    \"weight\": 78.0,\n    \"weight_unit\": \"Kilograms\",\n    \"complexion\": \"Medium\",\n    \"disability\": \"None\",\n    \"profession\": \"Senior Software Engineer\",\n    \"whatsapp_number\": \"9876543210\",\n    \"linkedin_url\": \"https://linkedin.com/in/johndoe\",\n    \"facebook_url\": \"https://facebook.com/johndoe\",\n    \"instagram_url\": \"https://instagram.com/johndoe\",\n    \"summary\": \"Updated profile: Looking for a life partner who shares similar values and interests. I am a senior software engineer passionate about technology, travel, and family values.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profile by Email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Profile retrieved successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Profile retrieved successfully');",
									"        pm.expect(jsonData.user).to.not.be.undefined;",
									"        pm.expect(jsonData.user.user_id).to.not.be.undefined;",
									"        pm.expect(jsonData.user.email).to.not.be.undefined;",
									"        pm.expect(jsonData.user.has_profile).to.be.a('boolean');",
									"    });",
									"    if (jsonData.user.has_profile) {",
									"        pm.test('Profile data exists', function () {",
									"            pm.expect(jsonData.profile).to.not.be.undefined;",
									"            pm.expect(jsonData.profile.profile_id).to.not.be.undefined;",
									"        });",
									"    }",
									"} else {",
									"    pm.test('Profile retrieval failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/profile/nikhil.punse5@gmail.com",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profile",
								"nikhil.punse5@gmail.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Profiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Profiles retrieved successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Profiles retrieved successfully');",
									"        pm.expect(jsonData.profiles).to.be.an('array');",
									"        pm.expect(jsonData.total).to.be.a('number');",
									"        pm.expect(jsonData.filters_applied).to.not.be.undefined;",
									"    });",
									"} else {",
									"    pm.test('Profiles retrieval failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([401, 403, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/profiles",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Profiles with Filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 200) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Filtered profiles retrieved successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Profiles retrieved successfully');",
									"        pm.expect(jsonData.profiles).to.be.an('array');",
									"        pm.expect(jsonData.total).to.be.a('number');",
									"        pm.expect(jsonData.filters_applied).to.not.be.undefined;",
									"        pm.expect(jsonData.filters_applied.gender).to.not.be.null;",
									"        pm.expect(jsonData.filters_applied.marital_status).to.not.be.null;",
									"    });",
									"} else {",
									"    pm.test('Filtered profiles retrieval failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([401, 403, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/profiles?gender=Female&marital_status=Single&religion=Hindu&min_age=25&max_age=35&limit=20",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profiles"
							],
							"query": [
								{
									"key": "gender",
									"value": "Female"
								},
								{
									"key": "marital_status",
									"value": "Single"
								},
								{
									"key": "religion",
									"value": "Hindu"
								},
								{
									"key": "min_age",
									"value": "25"
								},
								{
									"key": "max_age",
									"value": "35"
								},
								{
									"key": "limit",
									"value": "20"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create/Update primary contact",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJuaWtoaWwucHVuc2U1QGdtYWlsLmNvbSIsImlhdCI6MTc1MDYxMTAwNywiZXhwIjoxNzUwNjk3NDA3fQ.oGYm9-QtDrjH1PrdlN1uV_G1uSD1I7Swwym8v6Iat_w",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"manish@gmail.com\",\r\n    \"city\":\"Punse\",\r\n    \"state\":\"gaujrat\",\r\n    \"country\":\"india\",\r\n    \"zip_code\":\"115151\",\r\n    \"complete_address\":\"text here\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/primarycontact",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"primarycontact"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create/Update Education",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MiwiZW1haWwiOiJuaWtoaWwucHVuc2U1QGdtYWlsLmNvbSIsImlhdCI6MTc1MDc2MTIzNSwiZXhwIjoxNzUwODQ3NjM1fQ.v-14RHO2bqoWPjzsSy31wsBT7ulJ6bhOvz4nH5De6O0",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"nikhil.punse5@gmail.com\",\r\n    \"degree\":\"msc it\",\r\n    \"institution_name\":\"cmcs\",\r\n    \"year_of_passing\":\"2012\",\r\n    \"complete_address\":\"address123\",\r\n    \"city\":\"yavatmal\",\r\n    \"state\":\"up\",\r\n    \"country\":\"india\",\r\n    \"zip_code\":\"156454\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:8080/api/education",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8080",
							"path": [
								"api",
								"education"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Female Profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code === 201) {",
									"    const jsonData = pm.response.json();",
									"    pm.test('Female profile created successfully', function () {",
									"        pm.expect(jsonData.message).to.eql('Profile created successfully');",
									"        pm.expect(jsonData.profile_id).to.not.be.undefined;",
									"        pm.expect(jsonData.user_id).to.not.be.undefined;",
									"        pm.expect(jsonData.email).to.eql('jane.smith@example.com');",
									"    });",
									"} else {",
									"    pm.test('Female profile creation failed', function () {",
									"        pm.expect(pm.response.code).to.be.oneOf([400, 404, 500]);",
									"    });",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"jane.smith@example.com\",\n    \"first_name\": \"Jane\",\n    \"middle_name\": \"Elizabeth\",\n    \"last_name\": \"Smith\",\n    \"prefix\": \"Ms.\",\n    \"gender\": \"Female\",\n    \"birth_date\": \"1992-12-03\",\n    \"primary_phone\": \"9876543211\",\n    \"home_phone\": \"9876543213\",\n    \"emergency_phone\": \"9876543214\",\n    \"nationality\": \"Indian\",\n    \"religion\": \"Hindu\",\n    \"marital_status\": \"Single\",\n    \"caste\": \"General\",\n    \"height_inches\": 64,\n    \"weight\": 55.0,\n    \"weight_unit\": \"Kilograms\",\n    \"complexion\": \"Fair\",\n    \"disability\": \"None\",\n    \"profession\": \"Doctor\",\n    \"whatsapp_number\": \"9876543211\",\n    \"linkedin_url\": \"https://linkedin.com/in/janesmith\",\n    \"facebook_url\": \"https://facebook.com/janesmith\",\n    \"instagram_url\": \"https://instagram.com/janesmith\",\n    \"summary\": \"I am a doctor looking for a caring and understanding life partner. I value family, education, and personal growth.\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/profile",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"profile"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000"
		}
	]
}